/**
 * ðŸ”„ NAVIGATION MODE MANAGER
 * Gestiona el cambio entre modos de navegaciÃ³n (Steering Behaviors vs Legacy)
 * Parte de la refactorizaciÃ³n FASE 4 del NavigationSystem
 */

export class NavigationModeManager {
    constructor(gameEngine, fleetAdapter) {
        this.gameEngine = gameEngine;
        this.fleetAdapter = fleetAdapter;
        
        // Estado del modo de navegaciÃ³n
        this.useSteeringBehaviors = true;
        this.legacyMode = false;
        
        // ConfiguraciÃ³n de modos
        this.modes = {
            STEERING: 'steering',
            LEGACY: 'legacy'
        };
        
        console.log('ðŸ”„ NavigationModeManager inicializado');
    }

    /**
     * ðŸ”„ Cambiar entre modos de navegaciÃ³n
     */
    toggleNavigationMode() {
        this.useSteeringBehaviors = !this.useSteeringBehaviors;
        this.legacyMode = !this.useSteeringBehaviors;
        
        if (this.useSteeringBehaviors) {
            this.fleetAdapter.integrateWithGameEngine();
            console.log('ðŸ”„ Cambiado a Steering Behaviors');
        } else {
            this.fleetAdapter.restoreGameEngine();
            console.log('ðŸ”„ Cambiado a navegaciÃ³n Legacy');
        }
        
        return this.getCurrentMode();
    }

    /**
     * ðŸŽ¯ Configurar modo de navegaciÃ³n especÃ­fico
     */
    setNavigationMode(useSteeringBehaviors) {
        if (this.useSteeringBehaviors === useSteeringBehaviors) {
            return this.getCurrentMode();
        }
        
        return this.toggleNavigationMode();
    }

    /**
     * ðŸ“Š Obtener modo actual
     */
    getCurrentMode() {
        return this.useSteeringBehaviors ? this.modes.STEERING : this.modes.LEGACY;
    }

    /**
     * âœ… Verificar si estÃ¡ en modo steering
     */
    isSteeringMode() {
        return this.useSteeringBehaviors;
    }

    /**
     * âœ… Verificar si estÃ¡ en modo legacy
     */
    isLegacyMode() {
        return this.legacyMode;
    }

    /**
     * ðŸ“Š Obtener informaciÃ³n del modo actual
     */
    getModeInfo() {
        return {
            current: this.getCurrentMode(),
            useSteeringBehaviors: this.useSteeringBehaviors,
            legacyMode: this.legacyMode,
            available: Object.values(this.modes)
        };
    }
} 