/**
 * üéõÔ∏è CONFIGURACI√ìN DE STEERING BEHAVIORS
 * Configuraci√≥n exacta probada en el laboratorio
 * Basada en steering-behaviors-config (1).json - FUNCIONALIDAD PROBADA
 */

export const GALCON_STEERING_CONFIG_PROBADA = {
    // ‚úÖ SENSORES - Configuraci√≥n exacta del JSON probado
    sensors: {
        length: 20,        // ‚úÖ PROBADO: Funciona perfectamente
        width: 2,          // ‚úÖ PROBADO: Detecci√≥n precisa
        lateralCount: 0,   // ‚úÖ PROBADO: Sensores m√≠nimos eficientes
        lateralAngle: 10   // ‚úÖ PROBADO: √Ångulo √≥ptimo
    },
    
    // ‚ö° FUERZAS - Configuraci√≥n exacta del JSON probado
    forces: {
        maxForce: 200,     // ‚úÖ PROBADO: Responsivo para gameplay
        maxSpeed: 60,     // ‚úÖ PROBADO: Velocidad perfecta
        seekWeight: 1,     // ‚úÖ PROBADO: Prioridad al objetivo
        avoidanceWeight: 3, // ‚úÖ PROBADO: Evasi√≥n balanceada
        smoothing: 0.5     // ‚úÖ PROBADO: Suavizado visual
    },
    
    // üéØ COMPORTAMIENTOS - Configuraci√≥n exacta del JSON probado
    behavior: {
        arrivalRadius: 15,     // ‚úÖ PROBADO: Radio de llegada
        slowingDistance: 60,   // ‚úÖ PROBADO: Desaceleraci√≥n suave
        enableArrival: true,   // ‚úÖ PROBADO: Llegada inteligente
        enableWander: false    // ‚úÖ PROBADO: Sin vagabundeo
    },
    
    // üöÅ FLOTAS - Configuraci√≥n exacta del JSON probado
    fleet: {
        size: 15,              // ‚úÖ PROBADO: Tama√±o √≥ptimo
        spacing: 30,           // ‚úÖ PROBADO: Espaciado perfecto
        enableBoids: true,     // ‚úÖ PROBADO: Comportamientos de grupo
        separationWeight: 1.5, // ‚úÖ PROBADO: Separaci√≥n balanceada
        alignmentWeight: 1,    // ‚úÖ PROBADO: Alineaci√≥n suave
        cohesionWeight: 0.8    // ‚úÖ PROBADO: Cohesi√≥n natural
    },
    
    // üé® DEBUG - Sin visualizaci√≥n para el juego final
    debug: {
        showSensors: false,        // ‚ùå DESACTIVADO: Sin debug visual
        showForces: false,         // ‚ùå DESACTIVADO: Sin debug visual
        showVelocity: false,       // ‚ùå DESACTIVADO: Sin debug visual
        showTrails: false,         // ‚ùå DESACTIVADO: Sin debug visual
        showObstacleZones: false,  // ‚ùå DESACTIVADO: Sin debug visual
        showSpatialGrid: false,    // ‚ùå DESACTIVADO: Sin debug visual
        showFleetConnections: false, // ‚ùå DESACTIVADO: Sin debug visual
        showFleetCenter: false     // ‚ùå DESACTIVADO: Sin debug visual
    },
    
    // üÜï CONFIGURACI√ìN ESPEC√çFICA DE GALCON
    galcon: {
        planetMinDistance: 50,    // Distancia m√≠nima entre planetas
        arrivalSpread: 18,        // Dispersi√≥n en llegada
        launchDelay: 200,         // ms entre oleadas
        maxFleetSize: 15,         // M√°ximo naves por flota
        maxWaveSize: 8,           // M√°ximo naves por oleada (efecto enjambre)
        
        // Probabilidades de formaci√≥n
        formationProbability: {
            spread: 0.4,  // 40% - M√°s com√∫n
            line: 0.2,    // 20%
            wedge: 0.2,   // 20%
            circle: 0.2   // 20%
        },
        
        // Configuraci√≥n de lanzamiento gradual
        launch: {
            positionVariation: 15,  // Variaci√≥n en posici√≥n de salida
            delayVariation: 50,     // Variaci√≥n en delay entre oleadas
            minDistance: 10         // Distancia m√≠nima del borde del planeta
        }
    }
};

// üîß CONFIGURACI√ìN PARA DIFERENTES MODOS DE JUEGO
export const STEERING_CONFIGS = {
    // Configuraci√≥n est√°ndar (la probada)
    standard: GALCON_STEERING_CONFIG_PROBADA,
    
    // Configuraci√≥n para juego r√°pido
    fast: {
        ...GALCON_STEERING_CONFIG_PROBADA,
        forces: {
            ...GALCON_STEERING_CONFIG_PROBADA.forces,
            maxSpeed: 150,     // M√°s velocidad
            maxForce: 250      // M√°s responsivo
        },
        galcon: {
            ...GALCON_STEERING_CONFIG_PROBADA.galcon,
            launchDelay: 150   // Oleadas m√°s r√°pidas
        }
    },
    
    // Configuraci√≥n para muchas naves
    massive: {
        ...GALCON_STEERING_CONFIG_PROBADA,
        sensors: {
            ...GALCON_STEERING_CONFIG_PROBADA.sensors,
            length: 25,        // Sensores m√°s cortos
            lateralCount: 0    // Sin sensores laterales
        },
        galcon: {
            ...GALCON_STEERING_CONFIG_PROBADA.galcon,
            maxFleetSize: 20,  // Flotas m√°s grandes
            maxWaveSize: 10    // Oleadas m√°s grandes
        }
    }
};

// üéõÔ∏è FUNCIONES DE CONFIGURACI√ìN

/**
 * üîß Obtener configuraci√≥n por modo
 */
export function getSteeringConfig(mode = 'standard') {
    return STEERING_CONFIGS[mode] || STEERING_CONFIGS.standard;
}

/**
 * üé≤ Seleccionar formaci√≥n aleatoria
 */
export function selectRandomFormation(config = GALCON_STEERING_CONFIG_PROBADA) {
    const formations = ['spread', 'line', 'wedge', 'circle'];
    const probabilities = [
        config.galcon.formationProbability.spread,
        config.galcon.formationProbability.line,
        config.galcon.formationProbability.wedge,
        config.galcon.formationProbability.circle
    ];
    
    const random = Math.random();
    let cumulative = 0;
    
    for (let i = 0; i < formations.length; i++) {
        cumulative += probabilities[i];
        if (random <= cumulative) {
            return formations[i];
        }
    }
    
    return 'spread'; // fallback
}

/**
 * üåä Calcular oleadas de lanzamiento
 */
export function calculateLaunchWaves(totalShips, config = GALCON_STEERING_CONFIG_PROBADA) {
    const maxWaveSize = config.galcon.maxWaveSize;
    const waves = [];
    
    for (let i = 0; i < totalShips; i += maxWaveSize) {
        const waveSize = Math.min(maxWaveSize, totalShips - i);
        waves.push(waveSize);
    }
    
    return waves;
}

/**
 * üéØ Validar configuraci√≥n
 */
export function validateSteeringConfig(config) {
    const errors = [];
    
    // Validar sensores
    if (!config.sensors) {
        errors.push('Falta configuraci√≥n de sensores');
    } else {
        if (config.sensors.length <= 0) errors.push('Longitud de sensor debe ser > 0');
        if (config.sensors.width <= 0) errors.push('Ancho de sensor debe ser > 0');
        if (config.sensors.lateralCount < 0) errors.push('Cantidad de sensores laterales debe ser >= 0');
    }
    
    // Validar fuerzas
    if (!config.forces) {
        errors.push('Falta configuraci√≥n de fuerzas');
    } else {
        if (config.forces.maxForce <= 0) errors.push('Fuerza m√°xima debe ser > 0');
        if (config.forces.maxSpeed <= 0) errors.push('Velocidad m√°xima debe ser > 0');
    }
    
    // Validar flota
    if (!config.fleet) {
        errors.push('Falta configuraci√≥n de flota');
    } else {
        if (config.fleet.size <= 0) errors.push('Tama√±o de flota debe ser > 0');
        if (config.fleet.spacing <= 0) errors.push('Espaciado de flota debe ser > 0');
    }
    
    return {
        isValid: errors.length === 0,
        errors: errors
    };
}

/**
 * üîÑ Crear configuraci√≥n personalizada
 */
export function createCustomConfig(overrides = {}) {
    return {
        ...GALCON_STEERING_CONFIG_PROBADA,
        ...overrides,
        sensors: {
            ...GALCON_STEERING_CONFIG_PROBADA.sensors,
            ...(overrides.sensors || {})
        },
        forces: {
            ...GALCON_STEERING_CONFIG_PROBADA.forces,
            ...(overrides.forces || {})
        },
        behavior: {
            ...GALCON_STEERING_CONFIG_PROBADA.behavior,
            ...(overrides.behavior || {})
        },
        fleet: {
            ...GALCON_STEERING_CONFIG_PROBADA.fleet,
            ...(overrides.fleet || {})
        },
        debug: {
            ...GALCON_STEERING_CONFIG_PROBADA.debug,
            ...(overrides.debug || {})
        },
        galcon: {
            ...GALCON_STEERING_CONFIG_PROBADA.galcon,
            ...(overrides.galcon || {})
        }
    };
}

// üìä CONFIGURACIONES PREDEFINIDAS PARA TESTING
export const TEST_CONFIGS = {
    // Configuraci√≥n m√≠nima para testing
    minimal: createCustomConfig({
        sensors: { length: 20, width: 3, lateralCount: 0, lateralAngle: 0 },
        forces: { maxForce: 100, maxSpeed: 80 },
        fleet: { size: 5, spacing: 20 }
    }),
    
    // Configuraci√≥n m√°xima para testing
    maximal: createCustomConfig({
        sensors: { length: 50, width: 10, lateralCount: 3, lateralAngle: 30 },
        forces: { maxForce: 300, maxSpeed: 200 },
        fleet: { size: 25, spacing: 40 }
    })
};

console.log('üéõÔ∏è SteeringConfig cargado - Configuraci√≥n probada del laboratorio disponible'); 