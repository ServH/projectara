/**
 * üåä CONFIGURACI√ìN DE MOVIMIENTO ORG√ÅNICO
 * Par√°metros validados en el Hito 2 - Movimiento de Flota Org√°nica
 * 
 * Estos valores han sido exhaustivamente testados y optimizados para:
 * - Rendimiento: 60 FPS con 300+ naves simult√°neas
 * - Naturalidad: Movimiento org√°nico y vivo
 * - Cohesi√≥n: Sensaci√≥n de flota unificada
 * - Individualidad: Cada nave √∫nica pero coordinada
 */

export const ORGANIC_MOVEMENT_CONFIG = {
    // üöÄ MOVIMIENTO BASE
    movement: {
        // Fases de aceleraci√≥n/desaceleraci√≥n
        accelPhase: 0.2,        // 20% del viaje para acelerar/desacelerar
        accelFactor: 2.0,       // Multiplicador de velocidad en aceleraci√≥n
        decelFactor: 0.3,       // Multiplicador m√≠nimo en desaceleraci√≥n
        
        // Velocidades (p√≠xeles por segundo)
        maxSpeed: 120,          // Velocidad m√°xima base
        minSpeed: 20,           // Velocidad m√≠nima garantizada
        
        // Easing y suavizado
        useEasing: true,        // Aplicar easing suave a la interpolaci√≥n
        easingFunction: 'easeInOutQuad' // Tipo de easing
    },

    // üåä FORMACI√ìN DE FLOTA
    formation: {
        // Disposici√≥n circular
        baseRadius: 30,         // Radio base de formaci√≥n circular
        radiusSpread: 15,       // Variaci√≥n aleatoria del radio (+/-)
        
        // Timing de lanzamiento
        launchSpread: 300,      // Variaci√≥n en tiempo de lanzamiento (ms)
        maxLaunchDelay: 1000,   // Delay m√°ximo entre naves (ms)
        
        // Escalado seg√∫n tama√±o de flota
        scaleWithFleetSize: true,
        maxFormationRadius: 80,  // Radio m√°ximo para flotas grandes
        minFormationRadius: 10   // Radio m√≠nimo para flotas peque√±as
    },

    // ‚ú® VARIACI√ìN INDIVIDUAL
    individual: {
        // Caracter√≠sticas personales √∫nicas
        personalAmplitude: 0.15,    // Amplitud base de variaci√≥n personal
        personalFrequency: 0.002,   // Frecuencia base de oscilaci√≥n personal
        
        // Rangos de variaci√≥n
        amplitudeRange: [0.5, 1.5], // Multiplicador para amplitud personal
        frequencyRange: [0.5, 2.0], // Multiplicador para frecuencia personal
        speedVariation: 0.2,         // Variaci√≥n de velocidad entre naves (+/-)
        
        // Micro-desviaciones para movimiento vivo
        microDeviationRange: 1.5,    // Rango de micro-desviaciones (px)
        microFrequencyMultiplier: 2.0, // Multiplicador de frecuencia para micro-desviaciones
    },

    // üé® EFECTOS VISUALES
    visual: {
        // Opacidad din√°mica
        baseOpacity: 0.9,           // Opacidad base de las naves
        opacityVariation: 0.3,      // Variaci√≥n de opacidad para efecto "vivo"
        opacityFrequency: 0.003,    // Frecuencia de variaci√≥n de opacidad
        
        // Tama√±o din√°mico
        enableSizeVariation: true,   // Activar variaci√≥n de tama√±o
        sizeVariationAmount: 0.3,    // Cantidad de variaci√≥n de tama√±o
        sizeUpdateThreshold: 0.05,   // Umbral para actualizar tama√±o (optimizaci√≥n)
        
        // Colores y efectos
        enableColorPulse: false,     // Pulso de color (desactivado por rendimiento)
        trailLength: 8,              // Longitud del trail de las naves
        trailFadeTime: 2000          // Tiempo de fade del trail (ms)
    },

    // ‚ö° OPTIMIZACI√ìN Y RENDIMIENTO
    performance: {
        // L√≠mites de rendimiento
        maxSimultaneousFleets: 50,   // M√°ximo n√∫mero de flotas simult√°neas
        maxShipsPerFleet: 500,       // M√°ximo n√∫mero de naves por flota
        
        // Optimizaciones
        updateFrequency: 60,         // FPS objetivo
        batchUpdateSize: 10,         // Naves a actualizar por batch
        enableLOD: true,             // Level of Detail para flotas lejanas
        lodDistance: 500,            // Distancia para aplicar LOD
        
        // Pooling de objetos
        enableObjectPooling: true,   // Reutilizar objetos para optimizaci√≥n
        poolInitialSize: 100,        // Tama√±o inicial del pool
        poolGrowthFactor: 1.5        // Factor de crecimiento del pool
    },

    // üîß CONFIGURACI√ìN AVANZADA
    advanced: {
        // F√≠sica
        enablePhysics: true,         // Activar simulaci√≥n f√≠sica b√°sica
        gravityStrength: 0,          // Fuerza de gravedad (0 = desactivada)
        dampingFactor: 0.98,         // Factor de amortiguaci√≥n
        
        // Debugging
        enableDebugMode: false,      // Modo debug (logs adicionales)
        showFormationGuides: false,  // Mostrar gu√≠as de formaci√≥n
        showTrajectoryLines: false,  // Mostrar l√≠neas de trayectoria
        
        // Compatibilidad
        fallbackToLinear: true,      // Fallback a movimiento lineal si hay problemas
        validateCoordinates: true,   // Validar coordenadas contra NaN
        errorRecoveryMode: 'safe'    // Modo de recuperaci√≥n de errores
    }
};

/**
 * üéõÔ∏è PRESETS DE CONFIGURACI√ìN
 * Configuraciones predefinidas para diferentes escenarios
 */
export const ORGANIC_PRESETS = {
    // üèÉ‚Äç‚ôÇÔ∏è RENDIMIENTO M√ÅXIMO - Para dispositivos lentos
    performance: {
        ...ORGANIC_MOVEMENT_CONFIG,
        individual: {
            ...ORGANIC_MOVEMENT_CONFIG.individual,
            personalAmplitude: 0.05,
            microDeviationRange: 0.5
        },
        visual: {
            ...ORGANIC_MOVEMENT_CONFIG.visual,
            enableSizeVariation: false,
            trailLength: 3
        }
    },

    // üé® CALIDAD M√ÅXIMA - Para dispositivos potentes
    quality: {
        ...ORGANIC_MOVEMENT_CONFIG,
        individual: {
            ...ORGANIC_MOVEMENT_CONFIG.individual,
            personalAmplitude: 0.25,
            microDeviationRange: 3.0
        },
        visual: {
            ...ORGANIC_MOVEMENT_CONFIG.visual,
            opacityVariation: 0.5,
            trailLength: 15,
            enableColorPulse: true
        }
    },

    // ‚öñÔ∏è EQUILIBRADO - Configuraci√≥n por defecto
    balanced: ORGANIC_MOVEMENT_CONFIG,

    // üéØ PRECISI√ìN - Para gameplay competitivo
    precision: {
        ...ORGANIC_MOVEMENT_CONFIG,
        individual: {
            ...ORGANIC_MOVEMENT_CONFIG.individual,
            personalAmplitude: 0.05,
            speedVariation: 0.1,
            microDeviationRange: 0.5
        },
        movement: {
            ...ORGANIC_MOVEMENT_CONFIG.movement,
            accelFactor: 1.5,
            decelFactor: 0.5
        }
    }
};

/**
 * üîß UTILIDADES DE CONFIGURACI√ìN
 */
export class OrganicConfigManager {
    constructor(preset = 'balanced') {
        this.config = { ...ORGANIC_PRESETS[preset] };
        this.activePreset = preset;
    }

    /**
     * Cambiar preset de configuraci√≥n
     */
    setPreset(presetName) {
        if (ORGANIC_PRESETS[presetName]) {
            this.config = { ...ORGANIC_PRESETS[presetName] };
            this.activePreset = presetName;
            console.log(`üéõÔ∏è Preset org√°nico cambiado a: ${presetName}`);
            return true;
        }
        console.warn(`‚ö†Ô∏è Preset no encontrado: ${presetName}`);
        return false;
    }

    /**
     * Obtener configuraci√≥n actual
     */
    getConfig() {
        return this.config;
    }

    /**
     * Actualizar par√°metro espec√≠fico
     */
    updateParameter(section, key, value) {
        if (this.config[section] && this.config[section][key] !== undefined) {
            this.config[section][key] = value;
            console.log(`üîß Par√°metro actualizado: ${section}.${key} = ${value}`);
            return true;
        }
        console.warn(`‚ö†Ô∏è Par√°metro no encontrado: ${section}.${key}`);
        return false;
    }

    /**
     * Validar configuraci√≥n
     */
    validateConfig() {
        const errors = [];
        
        // Validar rangos de velocidad
        if (this.config.movement.minSpeed >= this.config.movement.maxSpeed) {
            errors.push('minSpeed debe ser menor que maxSpeed');
        }
        
        // Validar fases de aceleraci√≥n
        if (this.config.movement.accelPhase < 0 || this.config.movement.accelPhase > 0.5) {
            errors.push('accelPhase debe estar entre 0 y 0.5');
        }
        
        // Validar rangos de formaci√≥n
        if (this.config.formation.minFormationRadius >= this.config.formation.maxFormationRadius) {
            errors.push('minFormationRadius debe ser menor que maxFormationRadius');
        }
        
        if (errors.length > 0) {
            console.error('üö® Errores de configuraci√≥n:', errors);
            return false;
        }
        
        console.log('‚úÖ Configuraci√≥n validada correctamente');
        return true;
    }

    /**
     * Exportar configuraci√≥n actual
     */
    exportConfig() {
        return JSON.stringify(this.config, null, 2);
    }

    /**
     * Importar configuraci√≥n desde JSON
     */
    importConfig(jsonConfig) {
        try {
            const newConfig = JSON.parse(jsonConfig);
            this.config = { ...this.config, ...newConfig };
            this.activePreset = 'custom';
            console.log('üì• Configuraci√≥n importada correctamente');
            return this.validateConfig();
        } catch (error) {
            console.error('üö® Error al importar configuraci√≥n:', error);
            return false;
        }
    }
}

// Instancia global del manager de configuraci√≥n
export const organicConfig = new OrganicConfigManager('balanced');

export default ORGANIC_MOVEMENT_CONFIG; 