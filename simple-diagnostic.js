#!/usr/bin/env node

/**
 * üîç SIMPLE DIAGNOSTIC - Diagn√≥stico R√°pido Post-Refactorizaci√≥n
 * Versi√≥n expandida con pruebas cr√≠ticas basadas en problemas identificados
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

class SimpleDiagnostic {
    constructor() {
        this.errors = [];
        this.warnings = [];
        this.successes = [];
    }

    async runDiagnostic() {
        console.log('üîç DIAGN√ìSTICO R√ÅPIDO POST-REFACTORIZACI√ìN');
        console.log('='.repeat(50));
        console.log('Verificando problemas cr√≠ticos conocidos...\n');
        
        // 1. Verificar archivos cr√≠ticos
        this.checkCriticalFiles();
        
        // 2. Verificar Vector2D (problema original)
        this.checkVector2DCore();
        
        // 3. Verificar constructores robustos
        this.checkConstructors();
        
        // 4. Verificar configuraci√≥n ES6
        this.checkES6Configuration();
        
        // 5. Verificar sistema de eventos
        this.checkEventSystem();
        
        // 6. Verificar flujo de flotas
        this.checkFleetFlow();
        
        // 7. Verificar sistemas de interacci√≥n
        this.checkInteractionSystems();
        
        // 8. Verificar logging
        this.checkLogging();
        
        // 9. Generar reporte
        this.generateReport();
    }

    checkCriticalFiles() {
        console.log('üìÅ 1. Verificando archivos cr√≠ticos...');
        
        const criticalFiles = [
            'src/core/GameEngine.js',
            'src/entities/SteeringVehicle.js',
            'src/utils/Vector2D.js',
            'src/navigation/NavigationSystem.js',
            'src/systems/FleetFormationSystem.js',
            'src/debug/GameLogger.js',
            'src/input/DragDropHandler.js',
            'src/systems/SelectionSystem.js',
            'index.html',
            'package.json'
        ];

        let missing = 0;
        for (const file of criticalFiles) {
            const fullPath = path.join(__dirname, file);
            if (fs.existsSync(fullPath)) {
                console.log(`  ‚úÖ ${file}`);
                this.successes.push(`Archivo presente: ${file}`);
            } else {
                console.log(`  ‚ùå ${file} - FALTANTE`);
                this.errors.push(`Archivo cr√≠tico faltante: ${file}`);
                missing++;
            }
        }
        
        if (missing === 0) {
            console.log('  üéâ Todos los archivos cr√≠ticos presentes');
        }
    }

    checkVector2DCore() {
        console.log('\nüßÆ 2. Verificando Vector2D (Problema Original)...');
        
        try {
            const vector2DPath = path.join(__dirname, 'src/utils/Vector2D.js');
            const content = fs.readFileSync(vector2DPath, 'utf8');
            
            // Verificar exportaci√≥n
            if (content.includes('export class Vector2D')) {
                console.log('  ‚úÖ Vector2D: Clase exportada correctamente');
                this.successes.push('Vector2D exportaci√≥n correcta');
            } else {
                console.log('  ‚ùå Vector2D: Exportaci√≥n incorrecta');
                this.errors.push('Vector2D exportaci√≥n problem√°tica');
            }
            
            // Verificar m√©todo copy() - CAUSA ORIGINAL DEL ERROR
            if (content.includes('copy()') && content.includes('return new Vector2D')) {
                console.log('  ‚úÖ Vector2D: M√©todo copy() implementado - ERROR ORIGINAL SOLUCIONADO');
                this.successes.push('Vector2D m√©todo copy() funcional');
            } else {
                console.log('  ‚ùå Vector2D: M√©todo copy() faltante - CAUSA ORIGINAL DEL ERROR');
                this.errors.push('Vector2D m√©todo copy() problem√°tico - CR√çTICO');
            }
            
            // Verificar propiedades b√°sicas
            if (content.includes('this.x') && content.includes('this.y')) {
                console.log('  ‚úÖ Vector2D: Propiedades x, y definidas');
                this.successes.push('Vector2D propiedades b√°sicas OK');
            } else {
                console.log('  ‚ùå Vector2D: Propiedades x, y problem√°ticas');
                this.errors.push('Vector2D propiedades b√°sicas problem√°ticas');
            }
            
        } catch (error) {
            console.log(`  ‚ùå Vector2D: Error leyendo archivo - ${error.message}`);
            this.errors.push(`Error cr√≠tico en Vector2D: ${error.message}`);
        }
    }

    checkConstructors() {
        console.log('\nüèóÔ∏è  3. Verificando constructores robustos...');
        
        // Verificar SteeringVehicle
        try {
            const steeringPath = path.join(__dirname, 'src/entities/SteeringVehicle.js');
            const content = fs.readFileSync(steeringPath, 'utf8');
            
            if (content.includes('instanceof Vector2D')) {
                console.log('  ‚úÖ SteeringVehicle: Validaci√≥n Vector2D robusta');
                this.successes.push('SteeringVehicle validaci√≥n robusta');
            } else {
                console.log('  ‚ùå SteeringVehicle: Sin validaci√≥n Vector2D - CAUSA DE ERRORES');
                this.errors.push('SteeringVehicle sin validaci√≥n robusta');
            }
            
            if (content.includes('gameLogger')) {
                console.log('  ‚úÖ SteeringVehicle: Logging integrado');
                this.successes.push('SteeringVehicle con logging');
            } else {
                console.log('  ‚ö†Ô∏è  SteeringVehicle: Sin logging');
                this.warnings.push('SteeringVehicle sin logging');
            }
            
        } catch (error) {
            console.log(`  ‚ùå SteeringVehicle: Error - ${error.message}`);
            this.errors.push(`Error en SteeringVehicle: ${error.message}`);
        }
    }

    checkES6Configuration() {
        console.log('\n‚öôÔ∏è  4. Verificando configuraci√≥n ES6...');
        
        // Verificar package.json
        try {
            const packagePath = path.join(__dirname, 'package.json');
            const content = fs.readFileSync(packagePath, 'utf8');
            const packageJson = JSON.parse(content);
            
            if (packageJson.type === 'module') {
                console.log('  ‚úÖ package.json: ES6 modules habilitados');
                this.successes.push('package.json configurado para ES6');
            } else {
                console.log('  ‚ùå package.json: ES6 modules NO habilitados - IMPORTS FALLAR√ÅN');
                this.errors.push('package.json sin type: module');
            }
            
        } catch (error) {
            console.log(`  ‚ùå package.json: Error - ${error.message}`);
            this.errors.push(`Error en package.json: ${error.message}`);
        }
        
        // Verificar index.html
        try {
            const indexPath = path.join(__dirname, 'index.html');
            const content = fs.readFileSync(indexPath, 'utf8');
            
            if (content.includes('type="module"')) {
                console.log('  ‚úÖ index.html: ES6 modules configurados');
                this.successes.push('index.html configurado para ES6');
            } else {
                console.log('  ‚ùå index.html: ES6 modules NO configurados - SCRIPTS NO CARGAR√ÅN');
                this.errors.push('index.html sin type="module"');
            }
            
        } catch (error) {
            console.log(`  ‚ùå index.html: Error - ${error.message}`);
            this.errors.push(`Error en index.html: ${error.message}`);
        }
    }

    checkEventSystem() {
        console.log('\nüì° 5. Verificando sistema de eventos...');
        
        // Verificar GameEngine event listeners
        try {
            const gameEnginePath = path.join(__dirname, 'src/core/GameEngine.js');
            const content = fs.readFileSync(gameEnginePath, 'utf8');
            
            if (content.includes('handleFleetLaunched') && content.includes('eventBus.on')) {
                console.log('  ‚úÖ GameEngine: Event listeners configurados');
                this.successes.push('GameEngine event listeners OK');
            } else {
                console.log('  ‚ùå GameEngine: Event listeners NO configurados');
                this.errors.push('GameEngine event listeners problem√°ticos');
            }
            
            if (content.includes('gameLogger')) {
                console.log('  ‚úÖ GameEngine: Logging integrado');
                this.successes.push('GameEngine con logging');
            } else {
                console.log('  ‚ö†Ô∏è  GameEngine: Sin logging');
                this.warnings.push('GameEngine sin logging');
            }
            
        } catch (error) {
            console.log(`  ‚ùå GameEngine: Error - ${error.message}`);
            this.errors.push(`Error en GameEngine: ${error.message}`);
        }
    }

    checkFleetFlow() {
        console.log('\nüö¢ 6. Verificando flujo de flotas...');
        
        // Verificar FleetFormationSystem
        try {
            const formationPath = path.join(__dirname, 'src/systems/FleetFormationSystem.js');
            const content = fs.readFileSync(formationPath, 'utf8');
            
            if (content.includes('createOrganicFormation')) {
                console.log('  ‚úÖ FleetFormationSystem: M√©todo principal presente');
                this.successes.push('FleetFormationSystem funcional');
            } else {
                console.log('  ‚ùå FleetFormationSystem: M√©todo principal faltante - FLOTAS NO SE CREAN');
                this.errors.push('FleetFormationSystem no funcional');
            }
            
        } catch (error) {
            console.log(`  ‚ùå FleetFormationSystem: Error - ${error.message}`);
            this.errors.push(`Error en FleetFormationSystem: ${error.message}`);
        }
        
        // Verificar NavigationSystem
        try {
            const navPath = path.join(__dirname, 'src/navigation/NavigationSystem.js');
            const content = fs.readFileSync(navPath, 'utf8');
            
            if (content.includes('FLEET_ADDED') && content.includes('handleFleetAdded')) {
                console.log('  ‚úÖ NavigationSystem: Escucha eventos FLEET_ADDED');
                this.successes.push('NavigationSystem eventos OK');
            } else {
                console.log('  ‚ùå NavigationSystem: NO escucha FLEET_ADDED - FLOTAS NO SE MUEVEN');
                this.errors.push('NavigationSystem eventos problem√°ticos');
            }
            
        } catch (error) {
            console.log(`  ‚ùå NavigationSystem: Error - ${error.message}`);
            this.errors.push(`Error en NavigationSystem: ${error.message}`);
        }
    }

    checkInteractionSystems() {
        console.log('\nüñ±Ô∏è  7. Verificando sistemas de interacci√≥n...');
        
        // Verificar DragDropHandler
        try {
            const dragDropPath = path.join(__dirname, 'src/input/DragDropHandler.js');
            const content = fs.readFileSync(dragDropPath, 'utf8');
            
            if (content.includes('handleMouseDown') && content.includes('handleMouseUp')) {
                console.log('  ‚úÖ DragDropHandler: Eventos mouse configurados');
                this.successes.push('DragDropHandler eventos OK');
            } else {
                console.log('  ‚ùå DragDropHandler: Eventos mouse NO configurados - DRAG & DROP NO FUNCIONA');
                this.errors.push('DragDropHandler eventos problem√°ticos');
            }
            
        } catch (error) {
            console.log(`  ‚ùå DragDropHandler: Error - ${error.message}`);
            this.errors.push(`Error en DragDropHandler: ${error.message}`);
        }
        
        // Verificar SelectionSystem
        try {
            const selectionPath = path.join(__dirname, 'src/systems/SelectionSystem.js');
            const content = fs.readFileSync(selectionPath, 'utf8');
            
            if (content.includes('selectPlanet')) {
                console.log('  ‚úÖ SelectionSystem: Sistema de selecci√≥n presente');
                this.successes.push('SelectionSystem funcional');
            } else {
                console.log('  ‚ùå SelectionSystem: Sistema de selecci√≥n faltante - SELECCI√ìN NO FUNCIONA');
                this.errors.push('SelectionSystem no funcional');
            }
            
        } catch (error) {
            console.log(`  ‚ùå SelectionSystem: Error - ${error.message}`);
            this.errors.push(`Error en SelectionSystem: ${error.message}`);
        }
        
        // Verificar PercentageSelector
        try {
            const percentagePath = path.join(__dirname, 'src/ui/PercentageSelector.js');
            const content = fs.readFileSync(percentagePath, 'utf8');
            
            if (content.includes('updatePercentage')) {
                console.log('  ‚úÖ PercentageSelector: Funcionalidad presente');
                this.successes.push('PercentageSelector funcional');
            } else {
                console.log('  ‚ùå PercentageSelector: Funcionalidad faltante - BOTONES % NO FUNCIONAN');
                this.errors.push('PercentageSelector no funcional');
            }
            
        } catch (error) {
            console.log(`  ‚ùå PercentageSelector: Error - ${error.message}`);
            this.errors.push(`Error en PercentageSelector: ${error.message}`);
        }
    }

    checkLogging() {
        console.log('\nüìù 8. Verificando sistema de logging...');
        
        try {
            const loggerPath = path.join(__dirname, 'src/debug/GameLogger.js');
            const content = fs.readFileSync(loggerPath, 'utf8');
            
            if (content.includes('export const gameLogger')) {
                console.log('  ‚úÖ GameLogger: Exportado correctamente');
                this.successes.push('GameLogger exportaci√≥n OK');
            } else {
                console.log('  ‚ùå GameLogger: Exportaci√≥n problem√°tica');
                this.errors.push('GameLogger exportaci√≥n problem√°tica');
            }
            
            if (content.includes('error') && content.includes('warn') && content.includes('info')) {
                console.log('  ‚úÖ GameLogger: M√©todos de logging presentes');
                this.successes.push('GameLogger m√©todos OK');
            } else {
                console.log('  ‚ö†Ô∏è  GameLogger: M√©todos de logging incompletos');
                this.warnings.push('GameLogger m√©todos incompletos');
            }
            
        } catch (error) {
            console.log(`  ‚ùå GameLogger: Error - ${error.message}`);
            this.errors.push(`Error en GameLogger: ${error.message}`);
        }
    }

    generateReport() {
        console.log('\nüìä REPORTE R√ÅPIDO');
        console.log('='.repeat(30));
        
        const totalChecks = this.successes.length + this.warnings.length + this.errors.length;
        const successRate = Math.round((this.successes.length / totalChecks) * 100);
        
        console.log(`\nüìà RESUMEN:`);
        console.log(`  ‚úÖ √âxitos: ${this.successes.length}`);
        console.log(`  ‚ö†Ô∏è  Advertencias: ${this.warnings.length}`);
        console.log(`  ‚ùå Errores: ${this.errors.length}`);
        console.log(`  üìä Tasa de √©xito: ${successRate}%`);
        
        if (this.errors.length === 0) {
            console.log('\nüéâ ¬°SISTEMA PARECE ESTAR FUNCIONANDO!');
            console.log('  üöÄ Ejecuta: python3 -m http.server 8002');
            console.log('  üîç Abre DevTools (F12) para ver logs');
            console.log('  üéÆ Prueba hacer clic en planetas');
            console.log('  üñ±Ô∏è  Prueba drag & drop entre planetas');
        } else {
            console.log('\nüö® PROBLEMAS DETECTADOS:');
            this.errors.forEach((error, index) => {
                console.log(`  ${index + 1}. ${error}`);
            });
            
            console.log('\nüîß RECOMENDACIONES:');
            console.log('  üìù Ejecuta: node comprehensive-diagnostic.js (diagn√≥stico completo)');
            console.log('  üîÑ Ejecuta: node auto-fix.js (correcciones autom√°ticas)');
        }
        
        if (this.warnings.length > 0) {
            console.log('\n‚ö†Ô∏è  ADVERTENCIAS:');
            this.warnings.forEach((warning, index) => {
                console.log(`  ${index + 1}. ${warning}`);
            });
        }
        
        console.log('\nüî¨ PATRONES VERIFICADOS:');
        console.log('  ‚úì Vector2D.copy() error (problema original)');
        console.log('  ‚úì Constructor validation');
        console.log('  ‚úì ES6 module configuration');
        console.log('  ‚úì Event system integrity');
        console.log('  ‚úì Fleet creation and movement');
        console.log('  ‚úì UI interaction systems');
        console.log('  ‚úì Logging integration');
        
        console.log('\nüõ†Ô∏è  COMANDOS √öTILES:');
        console.log('  node simple-diagnostic.js         # Este diagn√≥stico r√°pido');
        console.log('  node comprehensive-diagnostic.js  # Diagn√≥stico exhaustivo');
        console.log('  node auto-fix.js                  # Correcciones autom√°ticas');
        console.log('  python3 -m http.server 8002       # Ejecutar juego');
    }
}

// Ejecutar diagn√≥stico r√°pido
const diagnostic = new SimpleDiagnostic();
diagnostic.runDiagnostic().catch(console.error); 